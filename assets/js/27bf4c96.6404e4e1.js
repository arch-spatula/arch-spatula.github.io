"use strict";(self.webpackChunkarch_spatula_github_io=self.webpackChunkarch_spatula_github_io||[]).push([[96904],{21078:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>o});var i=e(85893),l=e(11151);const s={sidebar_position:8,tags:["vim","vim distro","neovim","plugin"]},a="neovim \ud50c\ub7ec\uadf8\uc778",r={id:"vim-neovim-nvchad/plugin-list",title:"neovim \ud50c\ub7ec\uadf8\uc778",description:"\uc800\ub294 \ud604\uc7ac Lazy \ud50c\ub7ec\uadf8\uc778 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.",source:"@site/docs/vim-neovim-nvchad/plugin-list.md",sourceDirName:"vim-neovim-nvchad",slug:"/vim-neovim-nvchad/plugin-list",permalink:"/docs/vim-neovim-nvchad/plugin-list",draft:!1,unlisted:!1,editUrl:"https://github.com/arch-spatula/arch-spatula.github.io/blob/dev/docs/vim-neovim-nvchad/plugin-list.md",tags:[{label:"vim",permalink:"/docs/tags/vim"},{label:"vim distro",permalink:"/docs/tags/vim-distro"},{label:"neovim",permalink:"/docs/tags/neovim"},{label:"plugin",permalink:"/docs/tags/plugin"}],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,tags:["vim","vim distro","neovim","plugin"]},sidebar:"tutorialSidebar",previous:{title:"vim distro \ubaa9\ub85d",permalink:"/docs/vim-neovim-nvchad/vim-etc"},next:{title:"\uc774\ub7f0\uc800\ub7f0 \ucee4\ub9e8\ub4dc",permalink:"/docs/category/\uc774\ub7f0\uc800\ub7f0-\ucee4\ub9e8\ub4dc"}},c={},o=[{value:"\ud14c\ub9c8",id:"\ud14c\ub9c8",level:2},{value:"\ud558\ub2e8\ubc14",id:"\ud558\ub2e8\ubc14",level:2},{value:"\ub4e4\uc5ec\uc4f0\uae30",id:"\ub4e4\uc5ec\uc4f0\uae30",level:2},{value:"\uc0ac\uc774\ub4dc\ubc14",id:"\uc0ac\uc774\ub4dc\ubc14",level:2},{value:"LSP \uad00\ub9ac",id:"lsp-\uad00\ub9ac",level:2},{value:"fuzzy finder",id:"fuzzy-finder",level:2},{value:"syntax highlight",id:"syntax-highlight",level:2},{value:"git",id:"git",level:2},{value:"tabs",id:"tabs",level:2},{value:"undotree",id:"undotree",level:2},{value:"statusline",id:"statusline",level:2}];function d(t){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"neovim-\ud50c\ub7ec\uadf8\uc778",children:"neovim \ud50c\ub7ec\uadf8\uc778"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="init.lua"',children:'-- lazyvim \ud50c\ub7ec\uadf8\uc778 \uc124\uce58\nlocal lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"\nif not vim.loop.fs_stat(lazypath) then\n\tvim.fn.system({\n\t\t"git",\n\t\t"clone",\n\t\t"--filter=blob:none",\n\t\t"https://github.com/folke/lazy.nvim.git",\n\t\t"--branch=stable", -- latest stable release\n\t\tlazypath,\n\t})\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire("lazy").setup("plugins")\n'})}),"\n",(0,i.jsx)(n.p,{children:"\uc800\ub294 \ud604\uc7ac Lazy \ud50c\ub7ec\uadf8\uc778 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.h2,{id:"\ud14c\ub9c8",children:"\ud14c\ub9c8"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/theme.lua"',children:'return {\n\t"catppuccin/nvim",\n\tname = "catppuccin",\n\tpriority = 1000,\n\tinit = function()\n\t\t-- catppuccin \uceec\ub7ec \ud0dc\ub9c8 \uc124\uc815\n\t\tvim.cmd.colorscheme "catppuccin-mocha"\n\tend\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ud558\ub2e8\ubc14",children:"\ud558\ub2e8\ubc14"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/statusline.lua"',children:"return {\n\t'nvim-lualine/lualine.nvim',\n\tdependencies = { 'nvim-tree/nvim-web-devicons' },\n\tconfig = function()\n\t\trequire('lualine').setup()\n\tend\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ub4e4\uc5ec\uc4f0\uae30",children:"\ub4e4\uc5ec\uc4f0\uae30"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"indent-plugin",src:e(45357).Z+"",width:"1582",height:"1031"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"return {\n\t-- \ub4e4\uc5ec\uc4f0\uae30 \uad6c\ubd84\uc120 \uc124\uc815\n\t{\n\t\t'lukas-reineke/indent-blankline.nvim',\n\t\tmain = 'ibl',\n\t\topts = {},\n\t},\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\uc0ac\uc774\ub4dc\ubc14",children:"\uc0ac\uc774\ub4dc\ubc14"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"\uc0ac\uc774\ub4dc\ubc14",src:e(26345).Z+"",width:"1582",height:"1031"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/sidebar.lua"',children:'-- \uc0ac\uc774\ub4dc\ubc14\nreturn {\n\t"nvim-tree/nvim-tree.lua",\n\tcmd = { "NvimTreeToggle", "NvimTreeFocus" },\n\tversion = "*",\n\tlazy = false,\n\tdependencies = {\n\t\t"nvim-tree/nvim-web-devicons",\n\t},\n\tinit = function()\n\t\t-- \uc0ac\uc774\ub4dc \ud3b4\uae30 \ub2e8\ucd95\ud0a4\n\t\tvim.keymap.set(\'n\', \'<C-n>\', vim.cmd.NvimTreeToggle, {})\n\t\tvim.keymap.set(\'n\', \'<leader>e\', vim.cmd.NvimTreeFocus, {})\n\tend,\n\tconfig = function()\n\t\trequire("nvim-tree").setup {\n\t\t}\n\tend,\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"lsp-\uad00\ub9ac",children:"LSP \uad00\ub9ac"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'return { \n    {\n\t\t"williamboman/mason.nvim",\n\t\tcmd = {\n\t\t\t"Mason",\n\t\t\t"MasonInstall",\n\t\t\t"MasonInstallAll",\n\t\t\t"MasonUpdate",\n\t\t\t"MasonUninstall",\n\t\t\t"MasonUninstallAll",\n\t\t\t"MasonLog",\n\t\t},\n\t\tconfig = function()\n\t\t\trequire("mason").setup({})\n\t\t\t-- https://github.com/NvChad/NvChad/blob/e5f8a38ae3d6b3bedf68f29b0e96dad7a4ca2da5/lua/nvchad/plugins/init.lua\n\t\t\t-- NvChad \ub808\ud3ec\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 MasonInstallAll \ucee4\ub9e8\ub4dc\ub97c \uad6c\ud604\ud568\n\t\t\t-- \ucc98\uc74c\ubd80\ud130 \ud655\uc815 \uc124\uce58\ub97c \ud560\uc218 \uc5c6\uc74c MasonInstallAll\ub85c \ucf54\ub4dc\ub85c \uc124\uc815\uc744 \uba85\uc2dc\ud558\uac8c \ub428\n\t\t\tlocal ensure_installed = {\n\t\t\t\t"stylua",\n\t\t\t\t"spell",\n\t\t\t\t"codespell",\n\t\t\t\t"prettierd",\n\t\t\t\t"gospel",\n\t\t\t\t--"gofumpt",\n\t\t\t\t--"biome",\n\t\t\t\t"pylint",\n\t\t\t\t"cspell",\n\t\t\t}\n\n\t\t\tvim.api.nvim_create_user_command("MasonInstallAll", function()\n\t\t\t\tif ensure_installed and #ensure_installed > 0 then\n\t\t\t\t\tvim.cmd("MasonInstall " .. table.concat(ensure_installed, " "))\n\t\t\t\tend\n\t\t\tend, { desc = "Mason Install All package" })\n\t\tend,\n\t},\n},\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MasonInstallAll"}),"\uc740 \uc6d0\ub798 \uc5c6\ub294 \uba85\ub839\uc778\ub370 \uc218\ub3d9\uc73c\ub85c \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nvchad.com/",children:"NvChad"}),"\ub97c \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4. \uc9c1\uc811 ",(0,i.jsx)(n.a,{href:"https://github.com/NvChad/NvChad/blob/e5f8a38ae3d6b3bedf68f29b0e96dad7a4ca2da5/lua/nvchad/plugins/init.lua",children:"\uc18c\uc2a4 \ucf54\ub4dc"}),"\uc5d0\uc11c \uc5b4\ub5bb\uac8c \uad6c\ud604\ud588\ub294\uc9c0 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4."]}),"\n",(0,i.jsxs)(n.li,{children:["\uc774 \uba85\ub839\uc774 \uc788\uc73c\uba74 \ud574\ub2f9\ud558\ub294 \uc5b8\uc5b4\uc758 LSP\ub97c \ubcf8\uc778\uc758 \ubb38\uc11c\ub9d0\uace0 \ucf54\ub4dc\ub85c \uad00\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub0e5 ",(0,i.jsx)(n.code,{children:"MasonInstallAll"})," \uba85\ub839\uc73c\ub85c \uc124\uce58\ud558\uba74 \ub429\ub2c8\ub2e4."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'  -- lsp stuff\n  {\n    "williamboman/mason.nvim",\n    cmd = { "Mason", "MasonInstall", "MasonInstallAll", "MasonUpdate", "MasonUninstall", "MasonUninstallAll", "MasonLog" },\n    config = function()\n      require("mason").setup({})\n\n      local ensure_installed = {\n        "stylua",\n      }\n      -- custom nvchad cmd to install all mason binaries listed\n      vim.api.nvim_create_user_command("MasonInstallAll", function()\n        if ensure_installed and ensure_installed > 0 then\n          vim.cmd("MasonInstall " .. table.concat(ensure_installed, " "))\n        end\n      end, {})\n\n      vim.g.mason_binaries_list = opts.ensure_installed\n    end,\n  },\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\uc704\ub294 \uc870\uae08\ub354 \uac04\ub7b5\ud55c \ubc84\uc804\uc785\ub2c8\ub2e4."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fuzzy-finder",children:"fuzzy finder"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/telescope.lua"',children:"return {\n\t'nvim-telescope/telescope.nvim',\n\tbranch = '0.1.x',\n\tdependencies = {\n\t\t'nvim-lua/plenary.nvim',\n\t\t{\n\t\t\t'nvim-telescope/telescope-fzf-native.nvim',\n\t\t\t-- NOTE: If you are having trouble with this installation,\n\t\t\t--       refer to the README for telescope-fzf-native for more instructions.\n\t\t\tbuild = 'make',\n\t\t\tcond = function()\n\t\t\t\treturn vim.fn.executable 'make' == 1\n\t\t\tend,\n\t\t},\n\t},\n\tinit = function()\n\t\t-- \uac80\uc0c9\uae30 \ud65c\uc131\ud654\n\t\tlocal builtin = require('telescope.builtin')\n\t\tvim.keymap.set('n', '<leader>ff', builtin.find_files, {}) -- \ud30c\uc77c\uc774\ub984\uc73c\ub85c \uac80\uc0c9\n\t\tvim.keymap.set('n', '<leader>fg', builtin.live_grep, {}) -- \ub2e8\uc5b4 \uac80\uc0c9\n\t\tvim.keymap.set('n', '<leader>fb', builtin.buffers, {})   -- buffer \ud0ed \uac80\uc0c9\n\t\tvim.keymap.set('n', '<leader>fh', builtin.help_tags, {})\n\t\tvim.keymap.set('n', '<C-p>', builtin.git_files, {})\n\tend\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"syntax-highlight",children:"syntax highlight"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/highlight.lua"',children:'return {\n\t-- :TSInstallInfo \ub85c \uc124\uce58 \uc815\ubcf4 \ud655\uc778\n\t"nvim-treesitter/nvim-treesitter",\n\tbuild = ":TSUpdate",\n\tdependencies = {\n\t\t\'nvim-treesitter/nvim-treesitter-textobjects\'\n\t},\n\tconfig = function()\n\t\tlocal config = require("nvim-treesitter.configs")\n\t\tconfig.setup({\n\t\t\t-- \ud558\uc774\ub77c\uc774\ud2b8\ud560 \uc5b8\uc5b4 \ucd94\uac00\n\t\t\tensure_installed = { "lua", "vim", "vimdoc", "c", "cpp", "rust", "html", "css", "javascript", "typescript", "zig" },\n\t\t\thighlight = { enable = true },\n\t\t\tindent = { enable = true },\n\t\t})\n\tend\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"git",children:"git"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/git.lua"',children:"return {\n\t-- git \uc124\uc815\n\t-- Adds git related signs to the gutter, as well as utilities for managing changes\n\t'lewis6991/gitsigns.nvim',\n\topts = {\n\t\t-- See `:help gitsigns.txt`\n\t\tsigns = {\n\t\t\tadd = { text = '+' },\n\t\t\tchange = { text = '~' },\n\t\t\tdelete = { text = '_' },\n\t\t\ttopdelete = { text = '\u203e' },\n\t\t\tchangedelete = { text = '~' },\n\t\t},\n\t\ton_attach = function(bufnr)\n\t\t\tlocal gs = package.loaded.gitsigns\n\n\t\t\tlocal function map(mode, l, r, opts)\n\t\t\t\topts = opts or {}\n\t\t\t\topts.buffer = bufnr\n\t\t\t\tvim.keymap.set(mode, l, r, opts)\n\t\t\tend\n\n\t\t\t-- Navigation\n\t\t\tmap({ 'n', 'v' }, ']c', function()\n\t\t\t\tif vim.wo.diff then\n\t\t\t\t\treturn ']c'\n\t\t\t\tend\n\t\t\t\tvim.schedule(function()\n\t\t\t\t\tgs.next_hunk()\n\t\t\t\tend)\n\t\t\t\treturn '<Ignore>'\n\t\t\tend, { expr = true, desc = 'Jump to next hunk' })\n\n\t\t\tmap({ 'n', 'v' }, '[c', function()\n\t\t\t\tif vim.wo.diff then\n\t\t\t\t\treturn '[c'\n\t\t\t\tend\n\t\t\t\tvim.schedule(function()\n\t\t\t\t\tgs.prev_hunk()\n\t\t\t\tend)\n\t\t\t\treturn '<Ignore>'\n\t\t\tend, { expr = true, desc = 'Jump to previous hunk' })\n\n\t\t\t-- Actions\n\t\t\t-- visual mode\n\t\t\tmap('v', '<leader>hs', function()\n\t\t\t\tgs.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }\n\t\t\tend, { desc = 'stage git hunk' })\n\t\t\tmap('v', '<leader>hr', function()\n\t\t\t\tgs.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }\n\t\t\tend, { desc = 'reset git hunk' })\n\t\t\t-- normal mode\n\t\t\tmap('n', '<leader>hs', gs.stage_hunk, { desc = 'git stage hunk' })\n\t\t\tmap('n', '<leader>hr', gs.reset_hunk, { desc = 'git reset hunk' })\n\t\t\tmap('n', '<leader>hS', gs.stage_buffer, { desc = 'git Stage buffer' })\n\t\t\tmap('n', '<leader>hu', gs.undo_stage_hunk, { desc = 'undo stage hunk' })\n\t\t\tmap('n', '<leader>hR', gs.reset_buffer, { desc = 'git Reset buffer' })\n\t\t\tmap('n', '<leader>hp', gs.preview_hunk, { desc = 'preview git hunk' })\n\t\t\tmap('n', '<leader>hb', function()\n\t\t\t\tgs.blame_line { full = false }\n\t\t\tend, { desc = 'git blame line' })\n\t\t\tmap('n', '<leader>hd', gs.diffthis, { desc = 'git diff against index' })\n\t\t\tmap('n', '<leader>hD', function()\n\t\t\t\tgs.diffthis '~'\n\t\t\tend, { desc = 'git diff against last commit' })\n\n\t\t\t-- Toggles\n\t\t\tmap('n', '<leader>tb', gs.toggle_current_line_blame, { desc = 'toggle git blame line' })\n\t\t\tmap('n', '<leader>td', gs.toggle_deleted, { desc = 'toggle git show deleted' })\n\n\t\t\t-- Text object\n\t\t\tmap({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'select git hunk' })\n\t\tend,\n\t},\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tabs",children:"tabs"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"tabs",src:e(95e3).Z+"",width:"1582",height:"1031"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",metastring:'title="lua/plugins/tabs.lua"',children:'return {\n\t\'akinsho/bufferline.nvim\',\n\tversion = "*",\n\tdependencies = \'nvim-tree/nvim-web-devicons\',\n\tinit = function()\n\t\tvim.keymap.set("n", "bs", vim.cmd.BufferLineCloseOthers)\n\t\t--vim.keymap.set("n", "<leader>bcr", vim.cmd.BufferLineCloseRight)\n\t\t--vim.keymap.set("n", "<leader>bcl", vim.cmd.BufferLineCloseLeft)\n\t\tvim.keymap.set("n", "bct", vim.cmd.BufferLinePickClose)\n\t\tvim.keymap.set("n", "bt", vim.cmd.BufferLinePick) -- buffer target\n\tend,\n\tconfig = function()\n\t\tlocal bufferline = require(\'bufferline\')\n\t\tvim.opt.termguicolors = true\n\t\trequire("bufferline").setup {\n\t\t\toptions = {\n\t\t\t\tmode = "buffers",\n\t\t\t\tstyle_preset = bufferline.style_preset.minimal,\n\t\t\t\tthemable = true,\n\t\t\t\tnumbers = "ordinal",\n\t\t\t\tclose_command = "bdelete! %d", -- can be a string | function, | false see "Mouse actions"\n\t\t\t\tright_mouse_command = "bdelete! %d", -- can be a string | function | false, see "Mouse actions"\n\t\t\t\tleft_mouse_command = "buffer %d", -- can be a string | function, | false see "Mouse actions"\n\t\t\t\tmiddle_mouse_command = nil, -- can be a string | function, | false see "Mouse actions"\n\t\t\t\tindicator = {\n\t\t\t\t\ticon = \'\u258e\', -- this should be omitted if indicator style is not \'icon\'\n\t\t\t\t\tstyle = \'underline\', -- \'icon\' | \'underline\' | \'none\',\n\t\t\t\t},\n\t\t\t\tbuffer_close_icon = \'\udb80\udd56\',\n\t\t\t\tmodified_icon = \'\u25cf\',\n\t\t\t\tclose_icon = \'\uf00d\',\n\t\t\t\tleft_trunc_marker = \'\uf0a8\',\n\t\t\t\tright_trunc_marker = \'\uf0a9\',\n\t\t\t\tdiagnostics = "nvim_lsp",\n\t\t\t\toffsets = {\n\t\t\t\t\t{\n\t\t\t\t\t\tfiletype = "NvimTree",\n\t\t\t\t\t\ttext = "File Explorer", -- "File Explorer" | function ,\n\t\t\t\t\t\ttext_align = "center", -- "left" | "center" | "right"\n\t\t\t\t\t\tseparator = true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpadded_slant = true,\n\t\t\t\tcolor_icons = true, -- whether or not to add the filetype icon highlights\n\t\t\t\tget_element_icon = function(element)\n\t\t\t\t\t-- element consists of {filetype: string, path: string, extension: string, directory: string}\n\t\t\t\t\t-- This can be used to change how bufferline fetches the icon\n\t\t\t\t\t-- for an element e.g. a buffer or a tab.\n\t\t\t\t\t-- e.g.\n\t\t\t\t\tlocal icon, hl = require(\'nvim-web-devicons\').get_icon_by_filetype(element.filetype, { default = false })\n\t\t\t\t\treturn icon, hl\n\t\t\t\t\t-- or\n\t\t\t\t\t--local custom_map = {my_thing_ft: {icon = "my_thing_icon", hl}}\n\t\t\t\t\t--return custom_map[element.filetype]\n\t\t\t\tend,\n\t\t\t\tdiagnostics_indicator = function(count, level, diagnostics_dict, context)\n\t\t\t\t\tlocal icon = level:match("error") and "\uf05c " or "\uf071"\n\t\t\t\t\treturn " " .. icon .. count\n\t\t\t\tend,\n\t\t\t\tseparator_style = "thin", -- "slant" | "slope" | "thick" | "thin" | { \'any\', \'any\' },\n\t\t\t\thover = {\n\t\t\t\t\tenabled = true,\n\t\t\t\t\tdelay = 200,\n\t\t\t\t\treveal = { \'close\' }\n\t\t\t\t},\n\t\t\t\tshow_buffer_icons = true,   -- true | false, -- disable filetype icons for buffers\n\t\t\t\tshow_buffer_close_icons = true, -- true | false,\n\t\t\t\tshow_close_icon = true,     --true | false,\n\t\t\t\tshow_tab_indicators = true, --true | false,\n\t\t\t},\n\t\t}\n\tend\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"undotree",children:"undotree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:e(49992).Z+"",width:"4064",height:"2334"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'return {\n\t"mbbill/undotree",\n\tconfig = function()\n\t\t-- window \uac04 \uc774\ub3d9\ud560 \ub54c\ub294 mac \uae30\uc900 ctrl + w -> h, j, k, l \uc73c\ub85c \uc774\ub3d9\n\t\t-- toggle\uc744 \ub204\ub9ac\uae30 \ub54c\ubb38\uc5d0 leader(\uc2a4\ud398\uc774\uc2a4\ubc14)\ub97c \ub204\ub974\ub294 \ub3d9\uc548 u\ub97c \ub20c\ub7ec\uc57c \uc5f4\uace0 \ub2eb\uc744 \uc218 \uc788\uc74c\n\t\tvim.keymap.set("n", "<leader>u", vim.cmd.UndotreeToggle)\n\tend,\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.reddit.com/r/neovim/comments/oflohn/nvimwindow_easily_switch_between_windows_in_the/",children:"nvim-window - easily switch between windows in the current tab page"})}),"\n",(0,i.jsxs)(n.p,{children:["\uc704\ub294 \uc708\ub3c4\uc6b0\uac04 \uc774\ub3d9\uc744 \uc54c\ub824\uc8fc\ub294 \ud3ec\uc2a4\ud2b8\uc785\ub2c8\ub2e4. (",(0,i.jsx)(n.code,{children:"ctrl"})," + ",(0,i.jsx)(n.code,{children:"w"}),") + (",(0,i.jsx)(n.code,{children:"h"}),"/",(0,i.jsx)(n.code,{children:"j"}),"/",(0,i.jsx)(n.code,{children:"k"}),"/",(0,i.jsx)(n.code,{children:"l"}),") \uc778\ub370 w\ub97c window\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \uc9c1\uad00\uc801\uc785\ub2c8\ub2e4."]}),"\n",(0,i.jsx)("iframe",{className:"codepen",src:"https://www.youtube.com/embed/w7i4amO_zaE?t=810",title:"0 to LSP : Neovim RC From Scratch",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowFullScreen:!0}),"\n",(0,i.jsx)(n.p,{children:"\uc704 \uc124\uc815\uc744 \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.h2,{id:"statusline",children:"statusline"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:e(6661).Z+"",width:"4064",height:"2334"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'return {\n\t"nvim-lualine/lualine.nvim",\n\tdependencies = { "nvim-tree/nvim-web-devicons" },\n\tconfig = function()\n\t\t-- https://github.com/nvim-lualine/lualine.nvim/blob/master/examples/bubbles.lua\n\t\t-- \uc704\ub294 \ucc38\uace0\ud55c \ub808\ud3ec\uc785\ub2c8\ub2e4.\n\t\trequire("lualine").setup({\n\t\t\toptions = { component_separators = "", section_separators = { left = "\ue0b4", right = "\ue0b6" } },\n\t\t\tsections = {\n\t\t\t\tlualine_a = { { "mode", separator = { left = "\ue0b6" }, right_padding = 2 } },\n\t\t\t\t--lualine_b = { "filename", "branch" },\n\t\t\t\t--lualine_c = {\n\t\t\t\t--"%=", [> add your center compoentnts here in place of this comment <]\n\t\t\t\t--},\n\t\t\t\t--lualine_x = {},\n\t\t\t\t--lualine_y = { "filetype", "progress" },\n\t\t\t\tlualine_z = {\n\t\t\t\t\t{ "location", separator = { right = "\ue0b4" }, left_padding = 2 },\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\tend,\n}\n'})})]})}function u(t={}){const{wrapper:n}={...(0,l.a)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},95e3:(t,n,e)=>{e.d(n,{Z:()=>i});const i=e.p+"assets/images/tabs-9cfbe82a2d4685f56f4c4944d9bcd71c.png"},45357:(t,n,e)=>{e.d(n,{Z:()=>i});const i=e.p+"assets/images/indent-plugin-05046dfd7bda22d0145efa99ba46cd00.png"},26345:(t,n,e)=>{e.d(n,{Z:()=>i});const i=e.p+"assets/images/sidebar-3ff70048419c61d26fe827472db53138.png"},6661:(t,n,e)=>{e.d(n,{Z:()=>i});const i=e.p+"assets/images/statusline-20982168ad1fcb4578a61d5f58047aaa.png"},49992:(t,n,e)=>{e.d(n,{Z:()=>i});const i=e.p+"assets/images/undotree-f0c70728fbd63e17c3d3a716b1ecfb64.png"},11151:(t,n,e)=>{e.d(n,{Z:()=>r,a:()=>a});var i=e(67294);const l={},s=i.createContext(l);function a(t){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(l):t.components||l:a(t.components),i.createElement(s.Provider,{value:n},t.children)}}}]);