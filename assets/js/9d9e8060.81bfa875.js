"use strict";(self.webpackChunkarch_spatula_github_io=self.webpackChunkarch_spatula_github_io||[]).push([[18994],{30550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var a=t(85893),d=t(11151);const s={sidebar_position:4,tags:["python","data structure","algorithm","queue","stack","linked list"]},l="\ud30c\uc774\uc36c \uae30\ucd08 \uc790\ub8cc\uad6c\uc870\uc640 \uc54c\uace0\ub9ac\uc998",i={id:"python-ds-and-algo",title:"\ud30c\uc774\uc36c \uae30\ucd08 \uc790\ub8cc\uad6c\uc870\uc640 \uc54c\uace0\ub9ac\uc998",description:"DIY",source:"@site/python/python-ds-and-algo.md",sourceDirName:".",slug:"/python-ds-and-algo",permalink:"/python/python-ds-and-algo",draft:!1,unlisted:!1,tags:[{label:"python",permalink:"/python/tags/python"},{label:"data structure",permalink:"/python/tags/data-structure"},{label:"algorithm",permalink:"/python/tags/algorithm"},{label:"queue",permalink:"/python/tags/queue"},{label:"stack",permalink:"/python/tags/stack"},{label:"linked list",permalink:"/python/tags/linked-list"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,tags:["python","data structure","algorithm","queue","stack","linked list"]},sidebar:"tutorialSidebar",previous:{title:"\ud30c\uc774\uc36c \ubb38\ubc95 \uc90d\uc90d",permalink:"/python/python-syntax-sugar"},next:{title:"pymongo \uc774\ub7f0\uc800\ub7f0 \uc5d0\ub7ec",permalink:"/python/pymongo"}},r={},o=[{value:"DIY",id:"diy",level:2},{value:"Array",id:"array",level:3},{value:"Linked List",id:"linked-list",level:3},{value:"Stack",id:"stack",level:3},{value:"Queue",id:"queue",level:3},{value:"Native",id:"native",level:2},{value:"Linked List",id:"linked-list-1",level:3},{value:"Stack",id:"stack-1",level:3},{value:"Queue",id:"queue-1",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,d.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"\ud30c\uc774\uc36c-\uae30\ucd08-\uc790\ub8cc\uad6c\uc870\uc640-\uc54c\uace0\ub9ac\uc998",children:"\ud30c\uc774\uc36c \uae30\ucd08 \uc790\ub8cc\uad6c\uc870\uc640 \uc54c\uace0\ub9ac\uc998"}),"\n",(0,a.jsx)(n.h2,{id:"diy",children:"DIY"}),"\n",(0,a.jsx)(n.h3,{id:"array",children:"Array"}),"\n",(0,a.jsx)(n.p,{children:"DIY\ud560\uac8c \uc5c6\uc2b5\ub2c8\ub2e4."}),"\n",(0,a.jsx)(n.h3,{id:"linked-list",children:"Linked List"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'class Node:\n    def __init__(self, data) -> None:\n        self.data = data  # \uc5ec\uae30\ub294 \ud544\uc694\ud55c \uc790\ub8cc\ub97c \ud560\ub2f9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n        self.next = None  # \ucc98\uc74c\uc5d0\ub294 \uc5f0\uacb0\ud560 \uac8c \uc5c6\uc2b5\ub2c8\ub2e4. \uc5ec\uae30 \uc18d\uc131\uac12\uc774 \ud3ec\uc778\ud130 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.\n\nclass LinkedList:\n    def __init__(self, data):\n        self.head = Node(data)  # Head \uc5ed\ud560\uc744 \ud560 Node\ub97c \ud560\ub2f9\ud569\ub2c8\ub2e4.\n\n    def append(self, data):\n        # \uc608\uc678\ucc98\ub9ac Head\uac00 \uc5c6\ub294 \uacbd\uc6b0 append\ub97c \ud558\uba74 Head\ub85c \ud560\ub2f9\ud574\uc90d\ub2c8\ub2e4.\n        if self.head is None:\n            self.head = Node(data)\n            return  # \uba54\uc11c\ub4dc\uc758 \uc2e4\ud589\uc744 \uc885\ub8cc\uc2dc\ud0b5\ub2c8\ub2e4.\n\n        # Tail\uc5d0 \uc811\uadfc(\uc120\ud615\ud0d0\uc0c9)\n        cur = self.head\n        while cur.next is not None:\n            cur = cur.next\n\n        # \ucd94\uac00\n        cur.next = Node(data)\n\n    def printAll(self):\n        if self.head is None:\n            print("empty")\n\n        cur = self.head\n        while cur is not None:\n            print(cur.data)\n            cur = cur.next\n\n    # \uc778\ub371\uc2a4 \ud69f\uc218\ub9cc\ud07c \uc774\ub3d9\ud558\uae30 \uc704\ud574 for\ubb38\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n    def getNode(self, index):\n        cur = self.head\n        if index > 0:\n            for idx in range(index):\n                cur = cur.next\n        return cur\n\n    # \uc778\ub371\uc2a4 \ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.\n    def addNode(self, index, value):\n        newNode = Node(value)\n        # head\ub97c \uad50\uccb4\ud560 \ub54c\n        if index == 0:\n            newNode.next = self.head\n            self.head = newNode\n            return  #\uc2e4\ud589 \uc885\ub8cc\n\n        prevNode = self.getNode(index - 1)  # [a] -> [b] -> [c] a\ub791 b\uc0ac\uc774 d\ub97c \ucd94\uac00\ud560 \ub54c b \uc774\uc804 a\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4.\n        nextNode = prevNode.next            # [b] \ub178\ub4dc\ub97c \uae30\ub85d\ud569\ub2c8\ub2e4.\n        prevNode.next = newNode             # [a]\uc758 \ub2e4\uc74c \ub178\ub4dc\ub97c [d]\ub97c \ubc14\ub77c\ubcf4\uac8c \ud569\ub2c8\ub2e4. [a] -> [b] -> none  & [b] -> [c]\n        newNode.next = nextNode             # [d]\ub294 [b]\ub97c \ubc14\ub77c\ubcf4\uac8c \ud569\ub2c8\ub2e4. [a] -> [b] -> [b] -> [c]\n        return  #\uc2e4\ud589 \uc885\ub8cc\n\n    def deleteNode(self, index):\n        # [a]\ub97c \uc0ad\uc81c\ud560 \ub54c\n        if index == 0:\n            self.head = self.getNode(index+1)\n            return  #\uc2e4\ud589 \uc885\ub8cc\n\n        # [d]\ub97c \uc0ad\uc81c\ud560 \ub54c\n        if self.getNode(index).next == None:\n            self.getNode(index-1).next = None\n            return  #\uc2e4\ud589 \uc885\ub8cc\n\n        # \uc720\uc2a4\ucf00\uc774\uc2a4\n        # [a] -> [b] -> [c] -> [d] \uc911\uc5d0\uc11c [c]\ub97c \uc0ad\uc81c\ud558\uae30 \uc704\ud574 [b] \uc120\ud0dd\ud569\ub2c8\ub2e4.\n        prevNode = self.getNode(index-1)\n        # [a] -> [b] -> [d]\ub85c \ud3ec\uc778\ud130\ub97c \ubc14\uafc9\ub2c8\ub2e4. [c]\ub294 \uc804\ud6c4\uad00\uacc4\uac00 \uc5c6\uc5b4\uc9d1\ub2c8\ub2e4. \uba54\ubaa8\ub9ac \ub204\uc218\uac00 \uc788\ub294\uc9c0 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4.\n        prevNode.next = prevNode.next.next\n'})}),"\n",(0,a.jsx)(n.h3,{id:"stack",children:"Stack"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.head = None\n\n    def push(self, value):\n        newStack = Node(value)\n        newStack.next = self.head\n        self.head = newStack\n\n    # pop \uae30\ub2a5 \uad6c\ud604\n    def pop(self):\n        if self.is_empty(): return 'Stack\uc740 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4.'\n        # self.head\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.\n        stackPop = self.head\n        # self.head\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4.\n        self.head = self.head.next\n        return stackPop\n\n    def peek(self):\n        return self.head\n\n    def is_empty(self):\n        return self.head is None\n"})}),"\n",(0,a.jsx)(n.h3,{id:"queue",children:"Queue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Queue:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def enqueue(self, value):\n        newNode = Node(value)\n        if self.is_empty():\n            self.tail = newNode\n            self.head = newNode\n            return  # \uc2e4\ud589\uc885\ub8cc\n\n        newNode.next = self.tail\n        self.tail = newNode\n\n    def dequeue(self):\n        if self.is_empty(): return 'empty'\n        queuePop = self.head\n        self.head = self.head.next\n        return queuePop.data\n\n    def peek(self):\n        return self.head.data\n\n    def is_empty(self):\n        return self.head == None and self.tail == None\n"})}),"\n",(0,a.jsx)(n.h2,{id:"native",children:"Native"}),"\n",(0,a.jsx)(n.h3,{id:"linked-list-1",children:"Linked List"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"List"}),"\uc790\ub8cc\ud615 \uadf8\ub0e5 \uc4f0\uc138\uc694"]}),"\n",(0,a.jsx)(n.h3,{id:"stack-1",children:"Stack"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"stack = []            # \ube48 \uc2a4\ud0dd \ucd08\uae30\ud654\nstack.append(4)       # \uc2a4\ud0dd push(4)\nstack.append(3)       # \uc2a4\ud0dd push(3)\ntop = stack.pop()     # \uc2a4\ud0dd pop\nprint(top)            # 3!\n"})}),"\n",(0,a.jsx)(n.h3,{id:"queue-1",children:"Queue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:">>> queue = [4, 5, 6]\n>>> queue.insert(0, 3)\n>>> queue.insert(0, 2)\n>>> queue\n[2, 3, 4, 5, 6]\n>>> queue.pop()\n6\n>>> queue.pop()\n5\n>>> queue\n[2, 3, 4]\n"})}),"\n",(0,a.jsx)(n.p,{children:"\uad00\uce21\ud558\uae30\uc5d0\ub3c4 \uc790\uc5f0\uc2a4\ub7fd\uc2b5\ub2c8\ub2e4."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:">>> from queue import Queue\n>>>\n>>> que = Queue()\n>>> que.put(4)\n>>> que.put(5)\n>>> que.put(6)\n>>> que.get()\n4\n>>> que.get()\n5\n>>> que.get()\n6\n"})}),"\n",(0,a.jsx)(n.p,{children:"\ubc14\ud034\ub97c \ub2e4\uc2dc \ub9cc\ub4e4\uc9c0 \ub9d9\uc2dc\ub2e4."})]})}function c(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>l});var a=t(67294);const d={},s=a.createContext(d);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);