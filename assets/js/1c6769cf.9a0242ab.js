"use strict";(self.webpackChunkarch_spatula_github_io=self.webpackChunkarch_spatula_github_io||[]).push([[56049],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>g});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=r.createContext({}),l=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=l(n.components);return r.createElement(c.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,c=n.parentName,p=i(n,["components","mdxType","originalType","parentName"]),d=l(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return t?r.createElement(g,a(a({ref:e},p),{},{components:t})):r.createElement(g,a({ref:e},p))}));function g(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,a=new Array(s);a[0]=m;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i[d]="string"==typeof n?n:o,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},69663:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const s={title:"\ud1a0\ud070 \uc2f1\uae00\ud2bc",authors:["arch-spatula"],tags:["deno","token","singleton"],description:"\uc2f1\uae00\ud2bc \ud328\ud134\uc774 \uc801\ub2f9\ud574\ubcf4\uc5ec\uc11c \ud65c\uc6a9\ud588\uc2b5\ub2c8\ub2e4.",toc_max_heading_level:6},a="\ud1a0\ud070 \uc2f1\uae00\ud2bc",i={permalink:"/blog/2023/05/23/token-singleton",editUrl:"https://github.com/arch-spatula/arch-spatula.github.io/blob/dev/blog/2023-05-23-token-singleton.md",source:"@site/blog/2023-05-23-token-singleton.md",title:"\ud1a0\ud070 \uc2f1\uae00\ud2bc",description:"\uc2f1\uae00\ud2bc \ud328\ud134\uc774 \uc801\ub2f9\ud574\ubcf4\uc5ec\uc11c \ud65c\uc6a9\ud588\uc2b5\ub2c8\ub2e4.",date:"2023-05-23T00:00:00.000Z",formattedDate:"2023\ub144 5\uc6d4 23\uc77c",tags:[{label:"deno",permalink:"/blog/tags/deno"},{label:"token",permalink:"/blog/tags/token"},{label:"singleton",permalink:"/blog/tags/singleton"}],readingTime:11.105,hasTruncateMarker:!0,authors:[{name:"arch-spatula",title:"Cook-Book \ub9ce\uc774 \ub9cc\ub4ed\ub2c8\ub2e4",url:"https://github.com/arch-spatula",imageURL:"https://github.com/arch-spatula.png",key:"arch-spatula"}],frontMatter:{title:"\ud1a0\ud070 \uc2f1\uae00\ud2bc",authors:["arch-spatula"],tags:["deno","token","singleton"],description:"\uc2f1\uae00\ud2bc \ud328\ud134\uc774 \uc801\ub2f9\ud574\ubcf4\uc5ec\uc11c \ud65c\uc6a9\ud588\uc2b5\ub2c8\ub2e4.",toc_max_heading_level:6},prevItem:{title:"\uc5d0\ub7ec\ub85c\uadf8: Connection was forcibly closed by a peer",permalink:"/blog/2023/05/25/"},nextItem:{title:"\uc5d0\ub7ec\ub85c\uadf8: \uc65c mongoDB\ub294 POST\ub9cc \ud5c8\uc6a9\ud558\ub294\uac00?",permalink:"/blog/2023/05/22/"}},c={authorsImageUrls:[void 0]},l=[{value:"password hash\uc640 salt \uc800\uc7a5\ud558\uae30",id:"password-hash\uc640-salt-\uc800\uc7a5\ud558\uae30",level:2},{value:"API \uc2f1\uae00\ud2bc\uc5d0 \uc544\uc26c\uc6b4 \uc810",id:"api-\uc2f1\uae00\ud2bc\uc5d0-\uc544\uc26c\uc6b4-\uc810",level:2},{value:"JWT \ud1a0\ud070 \ub9cc\ub4e4\uc5b4\ubcf4\uae30",id:"jwt-\ud1a0\ud070-\ub9cc\ub4e4\uc5b4\ubcf4\uae30",level:2},{value:"JWT \ud1a0\ud070 \ub9cc\ub8cc \ub85c\uc9c1",id:"jwt-\ud1a0\ud070-\ub9cc\ub8cc-\ub85c\uc9c1",level:2},{value:"token \uc2f1\uae00\ud2bc",id:"token-\uc2f1\uae00\ud2bc",level:2}],p={toc:l},d="wrapper";function u(n){let{components:e,...t}=n;return(0,o.kt)(d,(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\uc2f1\uae00\ud2bc \ud328\ud134\uc774 \uc801\ub2f9\ud574\ubcf4\uc5ec\uc11c \ud65c\uc6a9\ud588\uc2b5\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"password-hash\uc640-salt-\uc800\uc7a5\ud558\uae30"},"password hash\uc640 salt \uc800\uc7a5\ud558\uae30"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://deno.land/x/bcrypt@v0.4.1"},"BCrypt")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"BCrypt algorithm is computationally quite expensive")),(0,o.kt)("p",null,"\uc9c1\uc811 \uc778\uc6a9\ud558\uba74 \uacc4\uc0b0\ube44\uc6a9\uc774 \ube44\uc2f8\ub2e4\uace0 \ud569\ub2c8\ub2e4. \ud1b5\uc2e0\ube44\uc6a9\uae4c\uc9c0 \uac10\uc548\ud558\uba74 \uc5b4\ub290\ucabd\uc774 \ub354 \ube44\uc300\uc9c0\ub294 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4."),(0,o.kt)("iframe",{class:"codepen",src:"https://www.youtube.com/embed/zt8Cocdy15c",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,o.kt)("p",null,"\uacfc\uc815 \ub05d\ub098\uace0 \uba74\uc811\uc9c8\ubb38 \ub2f5\ubcc0\ud558\uba74\uc11c \ubc1c\uacac\ud55c \uc9c0\uc2dd\uc785\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc77c\ub2e8 \ud3c9\uc11c\ubb38\uc73c\ub85c \uc800\uc7a5\ud558\uba74 \uace4\ub780\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { config } from 'https://deno.land/x/dotenv@v3.2.2/mod.ts';\nimport CardRecord from '../model/cards.ts';\nimport {\n  hash,\n  genSalt,\n  compare,\n} from 'https://deno.land/x/bcrypt@v0.4.1/mod.ts';\n\nconst { APP_ID, CARD_API_KEY } = config();\n\ntype Collection = {\n  dataSource: string;\n  database: string;\n  collection: string;\n};\n\nclass MongoAPI {\n  private static instance: MongoAPI;\n  private baseURL: string;\n  private options: {\n    method: string;\n    headers: { 'Content-Type': string; 'api-key': string };\n    body: BodyInit;\n  };\n  private cardBody: Collection;\n  private constructor() {\n    this.baseURL = `https://us-west-2.aws.data.mongodb-api.com/app/${APP_ID}/endpoint/data/v1/action`;\n    this.options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': CARD_API_KEY,\n      },\n      body: '',\n    };\n    // ... \uc0dd\ub7b5\n    this.userBody = {\n      dataSource: 'Cluster0',\n      database: 'cards_db',\n      collection: 'user',\n    };\n  }\n\n  static getInstance(): MongoAPI {\n    if (!MongoAPI.instance) {\n      MongoAPI.instance = new MongoAPI();\n    }\n    return MongoAPI.instance;\n  }\n  // ... \uc0dd\ub7b5\n\n  // \ud68c\uc6d0\uac00\uc785\n  async signup({ email, password }: { email: string; password: string }) {\n    try {\n      if ((await this.getUser(email)) === null) {\n        return await this.postUser(email, password);\n      } else {\n        throw Error('\uc774\ubbf8 \uac00\uc785\ud55c \uc544\uc774\ub514\uc785\ub2c8\ub2e4.');\n      }\n    } catch (error) {\n      return error;\n    }\n  }\n\n  // \ub85c\uadf8\uc778\n  async signin({ email, password }: { email: string; password: string }) {\n    try {\n      const document = await this.getUser(email);\n      if (document === null) {\n        throw Error('\uc774\uba54\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.');\n      } else {\n        if (!(await compare(password, document.passwordHash))) {\n          throw Error('\ube44\ubc00\ubc88\ud638\uac00 \uc54c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.');\n        } else {\n          return document;\n        }\n      }\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async postUser(email: string, password: string) {\n    try {\n      const passwordSalt = await genSalt(8);\n      const passwordHash = await hash(password, passwordSalt);\n      const result = await fetch(`${this.baseURL}/insertOne`, {\n        ...this.options,\n        body: JSON.stringify({\n          ...this.userBody,\n          document: { email, passwordHash, passwordSalt },\n        }),\n      });\n      return result.json();\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async getUser(email: string) {\n    try {\n      const result = await fetch(`${this.baseURL}/findOne`, {\n        ...this.options,\n        body: JSON.stringify({\n          ...this.userBody,\n          filter: { email },\n        }),\n      });\n      const data = await result.json();\n      return data.document;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport default MongoAPI;\n")),(0,o.kt)("p",null,"hash\uc640 salt\ub97c \ub9cc\ub4dc\ub294\ub370 \uc131\uacf5\ud588\uc2b5\ub2c8\ub2e4. ",(0,o.kt)("del",{parentName:"p"},"\uc0c1\uc73c\ub85c \ud574\uc26c\ube0c\ub77c\uc6b4\uc744 \ubcf8\uc778\uc5d0\uac8c \ub300\uc811\ud574\uc57c\uaca0\uc2b5\ub2c8\ub2e4.")),(0,o.kt)("h2",{id:"api-\uc2f1\uae00\ud2bc\uc5d0-\uc544\uc26c\uc6b4-\uc810"},"API \uc2f1\uae00\ud2bc\uc5d0 \uc544\uc26c\uc6b4 \uc810"),(0,o.kt)("p",null,"API\uc5d0 controller \ub85c\uc9c1\uc774 \uc788\uc5b4\uc11c \uc544\uc27d\uc2b5\ub2c8\ub2e4. \uc21c\uc218\ud558\uac8c DB\uc640 \ud1b5\uc2e0\ud558\ub294 \ucc45\uc784\uc744 \uc838\uc57c \ud558\ub294\ub370 \ub2e4\ub978 \ucc45\uc784\ub3c4 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { config } from 'https://deno.land/x/dotenv@v3.2.2/mod.ts';\nimport CardRecord from '../model/cards.ts';\n\nconst { APP_ID, CARD_API_KEY } = config();\n\ntype Collection = {\n  dataSource: string;\n  database: string;\n  collection: string;\n};\n\n/**\n * @see https://www.mongodb.com/developer/languages/rust/getting-started-deno-mongodb/\n * \ubaa8\ub4e0 method\uac00 POST\ub85c \uace0\uc815\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\uc815 \uba54\uc11c\ub4dc\uc5d0 \ub9de\uac8c \uac31\uc2e0\uc740 \uc5c6\uc2b5\ub2c8\ub2e4.\n */\n\nclass MongoAPI {\n  private static instance: MongoAPI;\n  private baseURL: string;\n  private options: {\n    method: string;\n    headers: { 'Content-Type': string; 'api-key': string };\n    body: BodyInit;\n  };\n  private userBody: Collection;\n  private constructor() {\n    this.baseURL = `https://us-west-2.aws.data.mongodb-api.com/app/${APP_ID}/endpoint/data/v1/action`;\n    this.options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': CARD_API_KEY,\n      },\n      body: '',\n    };\n    this.cardBody = {\n      dataSource: 'Cluster0',\n      database: 'cards_db',\n      collection: 'cards',\n    };\n  }\n\n  static getInstance(): MongoAPI {\n    if (!MongoAPI.instance) {\n      MongoAPI.instance = new MongoAPI();\n    }\n    return MongoAPI.instance;\n  }\n\n  async postUser({\n    email,\n    passwordHash,\n    passwordSalt,\n  }: {\n    email: string;\n    passwordHash: string;\n    passwordSalt: string;\n  }) {\n    try {\n      const result = await fetch(`${this.baseURL}/insertOne`, {\n        ...this.options,\n        body: JSON.stringify({\n          ...this.userBody,\n          document: { email, passwordHash, passwordSalt },\n        }),\n      });\n      return result.json();\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async getUser(email: string) {\n    try {\n      const result = await fetch(`${this.baseURL}/findOne`, {\n        ...this.options,\n        body: JSON.stringify({\n          ...this.userBody,\n          filter: { email },\n        }),\n      });\n      const data = await result.json();\n      return data.document;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n")),(0,o.kt)("p",null,"API\uc5d0\uc11c controller\uc5d0 \uc788\uc5b4\uc57c \ud560 \ubd80\ubd84\uc744 \uc81c\uac70\ud588\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Context } from 'https://deno.land/x/oak@v12.4.0/mod.ts';\nimport MongoAPI from '../api/mongoAPI.ts';\nimport {\n  hash,\n  genSalt,\n  compare,\n} from 'https://deno.land/x/bcrypt@v0.4.1/mod.ts';\n\nconst mongoAPI = MongoAPI.getInstance();\n\nasync function signup({ request, response }: Context) {\n  try {\n    if (!request.hasBody) {\n      throw Error('body\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    }\n    const card = await request.body().value;\n\n    if (!card.email || !card.password) {\n      throw Error('\uc774\uba54\uc77c \ud639\uc740 \ube44\ubc00 \ubc88\ud638\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    }\n\n    const document = await mongoAPI.getUser(card.email);\n\n    if (document !== null) {\n      throw Error('\uc774\ubbf8 \uac00\uc785\ud55c \uc544\uc774\ub514\uc785\ub2c8\ub2e4.');\n    } else {\n      const passwordSalt = await genSalt(8);\n      const passwordHash = await hash(card.password, passwordSalt);\n\n      response.status = 201;\n      response.body = await mongoAPI.postUser({\n        email: card.email,\n        passwordHash,\n        passwordSalt,\n      });\n    }\n  } catch (error) {\n    response.status = 400;\n    response.body = {\n      success: false,\n      msg: `${error}`,\n    };\n  }\n}\n\nasync function signin({ request, response, cookies }: Context) {\n  try {\n    if (!request.hasBody) {\n      throw Error('body\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    }\n    const card = await request.body().value;\n    if (!card.email || !card.password) {\n      throw Error('\uc774\uba54\uc77c \ud639\uc740 \ube44\ubc00 \ubc88\ud638\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    }\n    const document = await mongoAPI.getUser(card.email);\n    if (!document) throw Error('\uc774\uba54\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    else {\n      if (await compare(card.password, document.passwordHash)) {\n        response.status = 201;\n        response.body = document;\n        cookies.set('user', document._id);\n      } else {\n        throw Error('\ube44\ubc00\ubc88\ud638\uac00 \uc54c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.');\n      }\n    }\n  } catch (error) {\n    response.status = 400;\n    response.body = {\n      success: false,\n      msg: `${error}`,\n    };\n  }\n}\n\nexport { signup, signin };\n")),(0,o.kt)("p",null,"\uc774\ub3d9 \ub9ac\ud329\ud1a0\ub9c1\uc5d0 \uc131\uacf5\ud588\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"controller\uc5d0 \ub85c\uadf8\uc778 \uad00\ub828 \ub85c\uc9c1\uc744 \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\ub2e4\uc74c \ubb38\uc81c\ub294 JWT \ud1a0\ud070\uc744 \ub9cc\ub4e4\uace0 \uc11c\ubc84\uc5d0\uc11c \uc720\ud6a8\uc131\uc744 \uac80\uc99d\ud558\ub294 \uac83\uc785\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"jwt-\ud1a0\ud070-\ub9cc\ub4e4\uc5b4\ubcf4\uae30"},"JWT \ud1a0\ud070 \ub9cc\ub4e4\uc5b4\ubcf4\uae30"),(0,o.kt)("p",null,"\uc77c\ub2e8 5\uc6d4 \uc6d0\ud2f0\ub4dc \ucc4c\ub9b0\uc9c0\uc5d0\uc11c \ud504\ub860\ud2b8\uc5d4\ub4dc \ubcf4\uc548\uc5d0\uc11c \uc911\uc694\ud55c \uc810\uc740 cookie\ub97c \uc11c\ubc84\uc5d0\uc11c set\ud558\uace0 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc694\uccad\uc5d0\uc11c cookie\ub97c \uac80\uc99d\ud558\ub294\uac8c \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4(best practice)\ub77c\uace0 \ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac70\uae30\uae4c\uc9c0\ub294 \uc2dc\ub3c4\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4."),(0,o.kt)("iframe",{class:"codepen",src:"https://www.youtube.com/embed/UBUNrFtufWo",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { create, getNumericDate } from 'https://deno.land/x/djwt@v2.8/mod.ts';\n\nasync function signin({ request, response, cookies }: Context) {\n  try {\n    if (!request.hasBody) {\n      throw Error('body\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    }\n    const card = await request.body().value;\n    if (!card.email || !card.password) {\n      throw Error('\uc774\uba54\uc77c \ud639\uc740 \ube44\ubc00 \ubc88\ud638\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    }\n    const document = await mongoAPI.getUser(card.email);\n    if (!document) throw Error('\uc774\uba54\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    else {\n      if (await compare(card.password, document.passwordHash)) {\n        response.status = 201;\n        response.body = document;\n\n        const key = await crypto.subtle.generateKey(\n          { name: 'HMAC', hash: { name: 'SHA-512' } },\n          true,\n          ['sign', 'verify']\n        );\n        const jwt = await create(\n          { alg: 'HS512' },\n          { exp: getNumericDate(60 * 60), sub: document._id },\n          key\n        );\n\n        cookies.set('user', jwt);\n      } else {\n        throw Error('\ube44\ubc00\ubc88\ud638\uac00 \uc54c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.');\n      }\n    }\n  } catch (error) {\n    response.status = 400;\n    response.body = {\n      success: false,\n      msg: `${error}`,\n    };\n  }\n}\n")),(0,o.kt)("p",null,"\uc77c\ub2e8 \ud1a0\ud070\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ubb38\uc81c\ub294 \ub9cc\ub8cc\uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4. jwt \ud1a0\ud070\uc744 \uc0dd\uc131\ud560 \ub54c \ub9cc\ub8cc\ub294 \uac00\ub2a5\ud55c\ub370 oak cookie\uc5d0\uc11c\ub3c4 \ub9cc\ub8cc\ub97c \uc124\uc815\ud574\uc57c \ud569\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"jwt-\ud1a0\ud070-\ub9cc\ub8cc-\ub85c\uc9c1"},"JWT \ud1a0\ud070 \ub9cc\ub8cc \ub85c\uc9c1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  create,\n  getNumericDate,\n  verify,\n} from 'https://deno.land/x/djwt@v2.8/mod.ts';\n\nasync function makeKey() {\n  const key = await crypto.subtle.generateKey(\n    { name: 'HMAC', hash: { name: 'SHA-512' } },\n    true,\n    ['sign', 'verify']\n  );\n  return key;\n}\n\nasync function makeToken(userId: string, sec = 3600) {\n  const key = await makeKey();\n  const jwt = await create(\n    { alg: 'HS512' },\n    { exp: getNumericDate(sec), sub: userId },\n    key\n  );\n  return {\n    jwt,\n    expires: {\n      expires: new Date(new Date().getTime() + sec * 1000),\n    },\n  };\n}\n\nasync function tokenToUserId(jwt: string) {\n  const key = await makeKey();\n  const { sub } = await verify(jwt, key);\n  return sub;\n}\n\nexport { makeToken, makeKey, tokenToUserId };\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"async function signin({ request, response, cookies }: Context) {\n  try {\n    // ... \uc0dd\ub7b5\n    const document = await mongoAPI.getUser(card.email);\n    if (!document) throw Error('\uc774\uba54\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    else {\n      if (await compare(card.password, document.passwordHash)) {\n        response.status = 201;\n        response.body = document;\n\n        const { jwt, expires } = await makeToken(document._id, 60 * 60);\n        cookies.set('user', jwt, expires);\n      } else {\n        throw Error('\ube44\ubc00\ubc88\ud638\uac00 \uc54c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.');\n      }\n    }\n  } catch (error) {\n    // ... \uc0dd\ub7b5\n  }\n}\n")),(0,o.kt)("p",null,"\uc77c\ub2e8 \ub9cc\ub8cc\uc640 \ud1a0\ud070 \uc0dd\uc131 \ub85c\uc9c1\uc744 \ucee8\ud2b8\ub864\ub7ec\uc5d0\uc11c \ubd84\ub9ac\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\ub978 \ubb38\uc81c\uac00 \uc788\ub294\ub370 ",(0,o.kt)("inlineCode",{parentName:"p"},"makeKey"),"\ub294 \uace0\uc720\ud574\uc57c \ud558\ub294\ub370 \uc5ec\ub7ec\ubc88 \uc0dd\uc131\ub429\ub2c8\ub2e4. \ucd5c\ucd08 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131 \uc774\ud6c4\uc5d0 \uc77d\uae30 \uc804\uc6a9\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub124 \uc2f1\uae00\ud2bc\ucc98\ub7fc \ub4e4\ub9bd\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"token-\uc2f1\uae00\ud2bc"},"token \uc2f1\uae00\ud2bc"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  create,\n  getNumericDate,\n  verify,\n} from 'https://deno.land/x/djwt@v2.8/mod.ts';\n\n// \uc2f1\uae00\uc740 \uc2f1\uae00\ud2bc\nclass TokenManager {\n  private static instance: TokenManager;\n  readonly key: Promise<CryptoKey>;\n\n  private constructor() {\n    this.key = (async () => {\n      const key = await crypto.subtle.generateKey(\n        { name: 'HMAC', hash: { name: 'SHA-512' } },\n        true,\n        ['sign', 'verify']\n      );\n      return key;\n    })();\n  }\n\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n    }\n    return TokenManager.instance;\n  }\n\n  async makeToken(userId: string, sec = 3600) {\n    const jwt = await create(\n      { alg: 'HS512' },\n      { exp: getNumericDate(sec), sub: userId },\n      await this.key\n    );\n    return {\n      jwt,\n      expires: {\n        expires: new Date(new Date().getTime() + sec * 1000),\n      },\n    };\n  }\n\n  async tokenToUserId(jwt: string) {\n    const { sub } = await verify(jwt, await this.key);\n    return sub;\n  }\n}\n")),(0,o.kt)("p",null,"\uc778\uc2a4\ud134\uc2a4\ud654\ud560 \ub54c 1\ubc88\ub9cc \uc2e4\ud589\ub418\uace0 \uadf8 \uc774\ud6c4\ub85c \uc77d\uae30 \uc804\uc6a9\uc774 \ub41c\ub2e4\uba74 \uc774\ub807\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"key\ub294 1\ud68c\ub9cc \uc2e4\ud589\ud558\uace0 \ud560\ub2f9\ub418\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc2f1\uae00\ud2bc\uc744 \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud558\ub294 \uc608\uc2dc\uac00 \ub9de\ub294\uc9c0 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Context } from 'https://deno.land/x/oak@v12.4.0/mod.ts';\nimport MongoAPI from '../api/mongoAPI.ts';\nimport { Token } from '../util/token.ts';\nimport CardRecord from '../model/cards.ts';\n\nconst mongoAPI = MongoAPI.getInstance();\nconst token = Token.getInstance();\n\nasync function addCard({ request, response, cookies }: Context) {\n  try {\n    if (!request.hasBody) {\n      response.status = 400;\n      response.body = {\n        success: false,\n        msg: 'No Data',\n      };\n    } else {\n      const jwt = await cookies.get('user');\n      if (!jwt) {\n        throw Error('\uc778\uc99d\uc774 \uc548 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.');\n      }\n      const userId = await token.tokenToUserId(jwt);\n      if (!userId) throw Error('\uc0ac\uc6a9\uc790 id\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n\n      const { question, answer, submitDate, stackCount } = await request.body()\n        .value;\n      if (!question || !answer || !submitDate || !stackCount)\n        throw Error('question, answer, data, stackCount \uc911 \uac12\uc774 1\uac1c \uc5c6\uc2b5\ub2c8\ub2e4.');\n\n      const card = new CardRecord(\n        question,\n        answer,\n        submitDate,\n        stackCount,\n        userId\n      );\n      response.status = 201;\n      response.body = await mongoAPI.postCards(card);\n    }\n  } catch (error) {\n    response.status = 400;\n    response.body = {\n      success: false,\n      msg: `${error}`,\n    };\n  }\n}\n\nasync function getCards({ response, cookies }: Context) {\n  try {\n    const jwt = await cookies.get('user');\n    if (!jwt) {\n      throw Error('\uc778\uc99d\uc774 \uc548 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.');\n    }\n\n    const userId = await token.tokenToUserId(jwt);\n    if (!userId) throw Error('\uc0ac\uc6a9\uc790 id\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.');\n    console.log(userId);\n\n    response.status = 200;\n    response.body = await mongoAPI.getCards(userId);\n  } catch (error) {\n    response.status = 400;\n    response.body = {\n      success: false,\n      msg: `${error}`,\n    };\n  }\n}\n")),(0,o.kt)("p",null,"\uc5ec\uae30\uae4c\uc9c0 \uc791\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 API\ub97c \uc81c\uacf5\ud558\uace0 \uc644\uc131\ud558\uace0 PR \uc62c\ub9ac\uba74 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4. PR \uc774\ud6c4\uc5d0\ub294 CORS \uc124\uc815\uc774 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4."))}u.isMDXComponent=!0}}]);