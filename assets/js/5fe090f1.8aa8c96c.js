"use strict";(self.webpackChunkarch_spatula_github_io=self.webpackChunkarch_spatula_github_io||[]).push([[96840],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},i=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,u(u({ref:t},i),{},{components:n})):r.createElement(f,u({ref:t},i))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,u=new Array(o);u[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,u[1]=l;for(var s=2;s<o;s++)u[s]=n[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:4,description:"\ube48\ub3c4\uc218 \uc138\uae30",tags:["\ube48\ub3c4\uc218 \uc138\uae30","frequency counter","\ubb38\uc81c \uc720\ud615"]},u="\ube48\ub3c4\uc218 \uc138\uae30",l={unversionedId:"algorithms-and-data-structures/frequency-counter",id:"algorithms-and-data-structures/frequency-counter",title:"\ube48\ub3c4\uc218 \uc138\uae30",description:"\ube48\ub3c4\uc218 \uc138\uae30",source:"@site/diy-cs/algorithms-and-data-structures/frequency-counter.md",sourceDirName:"algorithms-and-data-structures",slug:"/algorithms-and-data-structures/frequency-counter",permalink:"/diy-cs/algorithms-and-data-structures/frequency-counter",draft:!1,tags:[{label:"\ube48\ub3c4\uc218 \uc138\uae30",permalink:"/diy-cs/tags/\ube48\ub3c4\uc218-\uc138\uae30"},{label:"frequency counter",permalink:"/diy-cs/tags/frequency-counter"},{label:"\ubb38\uc81c \uc720\ud615",permalink:"/diy-cs/tags/\ubb38\uc81c-\uc720\ud615"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"\ube48\ub3c4\uc218 \uc138\uae30",tags:["\ube48\ub3c4\uc218 \uc138\uae30","frequency counter","\ubb38\uc81c \uc720\ud615"]},sidebar:"tutorialSidebar",previous:{title:"\ubc31\ud2b8\ub808\ud0b9",permalink:"/diy-cs/algorithms-and-data-structures/backTrack"},next:{title:"\uad6c\ud604",permalink:"/diy-cs/algorithms-and-data-structures/implementation"}},c={},s=[{value:"\ucd5c\ube48\uac12 \uad6c\ud558\uae30",id:"\ucd5c\ube48\uac12-\uad6c\ud558\uae30",level:2}],i={toc:s},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\ube48\ub3c4\uc218-\uc138\uae30"},"\ube48\ub3c4\uc218 \uc138\uae30"),(0,a.kt)("p",null,"\ube48\ub3c4\uc218 \uc138\uae30(frequency counter)\ub294 \ub4f1\uc7a5 \ud69f\uc218\ub97c \uae30\ub85d\ud558\ub294 \ubb38\uc81c \uc720\ud615\uc785\ub2c8\ub2e4. ",(0,a.kt)("inlineCode",{parentName:"p"},"Map")," \ubb38\uc81c\ub791 \uacb9\uce58\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4."),(0,a.kt)("h2",{id:"\ucd5c\ube48\uac12-\uad6c\ud558\uae30"},"\ucd5c\ube48\uac12 \uad6c\ud558\uae30"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://school.programmers.co.kr/learn/courses/30/lessons/120812"},"\ucd5c\ube48\uac12 \uad6c\ud558\uae30 - \ud504\ub85c\uadf8\ub798\uba38\uc2a4")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} array\n * @returns {number}\n */\nfunction solution(array) {\n  var answer = 0;\n  return answer;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import solution from './playground';\nimport { test, expect, describe } from 'vitest';\n\n// array                result\n// [1, 2, 3, 3, 3, 4]   3\n// [1, 1, 2, 2]       -1\n// [1]                1\n\ndescribe('\ucd5c\ube48\uac12 \uad6c\ud558\uae30', () => {\n  test('\uc608\uc81c 1', () => {\n    expect(solution([1, 2, 3, 3, 3, 4])).toBe(3);\n  });\n  test('\uc608\uc81c 2', () => {\n    expect(solution([1, 1, 2, 2])).toBe(-1);\n  });\n  test('\uc608\uc81c 3', () => {\n    expect(solution([1])).toBe(1);\n  });\n});\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"2023\ub144 09\uc6d4 01\uc77c"),(0,a.kt)("div",{markdown:"1"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} array\n * @returns {number}\n */\nfunction solution(array) {\n  const memo = new Map();\n\n  array.forEach((elem) => {\n    if (memo.get(elem) === undefined) memo.set(elem, 1);\n    else memo.set(elem, memo.get(elem) + 1);\n  });\n\n  let modeCount = 0;\n  let modeValue = 0;\n  memo.forEach((value, key) => {\n    if (modeCount < value) {\n      modeValue = key;\n      modeCount = value;\n    }\n  });\n\n  let maxDouble = 0;\n  memo.forEach((value, key) => {\n    if (value === modeCount) maxDouble += 1;\n  });\n  if (maxDouble >= 2) return -1;\n\n  return modeValue;\n}\n")))))}p.isMDXComponent=!0}}]);